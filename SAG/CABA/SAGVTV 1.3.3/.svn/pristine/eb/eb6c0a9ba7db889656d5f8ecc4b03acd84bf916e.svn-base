unit GenerateResumenDiarioADM;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, DB, SqlExpr, Provider, DBClient, USAGESTACION, SpeedBar, ExtCtrls,
  StdCtrls, Mask, DBCtrls, Buttons, RXLookup, ComCtrls, ComObj;

type
  TResumenDiarioADM = class(TForm)
    Bevel_MP: TBevel;
    TAutosMP: TStaticText;
    TMotosMP: TStaticText;
    Cantidad_Autos_MP: TEdit;
    Cantidad_Motos_MP: TEdit;
    ImporteAutoMP: TLabeledEdit;
    IVAAutoMP: TLabeledEdit;
    IIBBAutoMP: TLabeledEdit;
    MontoTotalAutoMP: TLabeledEdit;
    ImporteMotoMP: TLabeledEdit;
    IVAMotoMP: TLabeledEdit;
    IIBBMotoMP: TLabeledEdit;
    MontoTotalMotoMP: TLabeledEdit;
    BevelMP: TBevel;
    StaticText1: TStaticText;
    Bevel_EP: TBevel;
    TAutoEP: TStaticText;
    TMotoEP: TStaticText;
    Cantidad_Autos_EP: TEdit;
    Cantidad_Motos_EP: TEdit;
    ImporteAutoEP: TLabeledEdit;
    IVAAutoEP: TLabeledEdit;
    IIBBAutoEP: TLabeledEdit;
    MontoTotalAutoEP: TLabeledEdit;
    ImporteMotoEP: TLabeledEdit;
    IVAMotoEP: TLabeledEdit;
    IIBBMotoEP: TLabeledEdit;
    MontoTotalMotoEP: TLabeledEdit;
    BevelEP: TBevel;
    StaticText6: TStaticText;
    TPagos: TStaticText;
    TServiciosPrestados: TStaticText;
    BevelTotalGeneral: TBevel;
    TotalGlobal: TStaticText;
    BevelGlobal: TBevel;
    TAutosGlobal: TStaticText;
    TMotosGlobal: TStaticText;
    Cantidad_Autos_Global: TEdit;
    Cantidad_Motos_Global: TEdit;
    ImporteAutosGlobal: TLabeledEdit;
    IVAAutosGlobal: TLabeledEdit;
    IIBBAutosGlobal: TLabeledEdit;
    MontoAutosGlobal: TLabeledEdit;
    ImporteMotosGlobal: TLabeledEdit;
    IVAMotosGlobal: TLabeledEdit;
    IIBBMotosGlobal: TLabeledEdit;
    MontoMotosGlobal: TLabeledEdit;
    TServiciosPendientes: TStaticText;
    Bevel_ServiciosPendientesMP: TBevel;
    SBarPrincipal: TSpeedBar;
    SpeedbarSection1: TSpeedbarSection;
    SpeedbarSection2: TSpeedbarSection;
    SpeedbarSection3: TSpeedbarSection;
    BExcel: TSpeedItem;
    SBBusqueda: TSpeedItem;
    SBSalir: TSpeedItem;
    MP: TStaticText;
    StaticText2: TStaticText;
    Bevel_ServiciosPrestadosMP: TBevel;
    MPAutosServPrestadosCantidad: TEdit;
    MPMotosServPrestadosCantidad: TEdit;
    EPAutosServPrestadosCantidad: TEdit;
    EPMotosServPrestadosCantidad: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    StaticText4: TStaticText;
    MPTotalServPrestadosCantidad: TEdit;
    EPTotalServPrestadosCantidad: TEdit;
    Label3: TLabel;
    Label4: TLabel;
    StaticText3: TStaticText;
    StaticText5: TStaticText;
    MPAutosServPendientesCantidad: TEdit;
    MPMotosServPendientesCantidad: TEdit;
    EPAutosServPendientesCantidad: TEdit;
    EPMotosServPendientesCantidad: TEdit;
    StaticText7: TStaticText;
    MPTotalServPendientesCantidad: TEdit;
    EPTotalServPendientesCantidad: TEdit;
    EPAutosServPrestadosCash: TEdit;
    EPMotosServPrestadosCash: TEdit;
    EPTotalServPrestadosCash: TEdit;
    MPAutosServPrestadosCash: TEdit;
    MPMotosServPrestadosCash: TEdit;
    MPTotalServPrestadosCash: TEdit;
    StaticText8: TStaticText;
    StaticText9: TStaticText;
    MPAutosServPendientesCash: TEdit;
    MPMotosServPendientesCash: TEdit;
    MPTotalServPendientesCash: TEdit;
    EPAutosServPendientesCash: TEdit;
    EPMotosServPendientesCash: TEdit;
    EPTotalServPendientesCash: TEdit;
    StaticText10: TStaticText;
    StaticText11: TStaticText;
    StaticText12: TStaticText;
    Bevel1: TBevel;
    Label5: TLabel;
    Label6: TLabel;
    TTAutosServCantidad: TEdit;
    TTMotosServCantidad: TEdit;
    StaticText15: TStaticText;
    TTotalServCantidad: TEdit;
    TTAutosServCash: TEdit;
    TTMotosServCash: TEdit;
    TTotalServCash: TEdit;
    StaticText16: TStaticText;
    StaticText13: TStaticText;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure SBBusquedaClick(Sender: TObject);
    procedure SBSalirClick(Sender: TObject);
    procedure OnOpen (Sender: TObject);
    procedure OnClose (Sender: TObject);
  private
    procedure DoResumenDiario;
  public
    bErrorCreando : boolean;
    NombreEstacion, NumeroEstacion, DateIni, DateFin: string;
    function PutEstacion : string;
  end;

  procedure GenerateResumenDiario;

var
  ResumenDiarioADM: TResumenDiarioADM;

implementation

{$R *.dfm}

uses
   UCDIALGS,
   ULOGS,
   UGETDATES,
   UFTMP,
   GLOBALS,
   UUTILS,
   USAGVARIOS;

  resourcestring
      FICHERO_ACTUAL = 'GenerateResumenDiarioADM';

  procedure GenerateResumenDiario;
    BEGIN
      with TResumenDiarioADM.Create(Application) do
        try
            try
                if bErrorCreando then exit;
                If not GetDates(DateIni,DateFin) then Exit;
                Caption := Format('Resumen Diario. Planta: %S. (%S - %S)', [PutEstacion,Copy(DateIni,1,10), Copy(DateFin,1,10)]);
                FTmp.Temporizar(TRUE,FALSE,'Resumen Diario', 'Generando el Resumen Diario.');

                Application.ProcessMessages;

                DoResumenDiario;

                FTmp.Temporizar(FALSE,FALSE,'', '');
                ShowModal;
            except
                on E: Exception do
                begin
                    FTmp.Temporizar(FALSE,FALSE,'', '');
                    Application.ProcessMessages;
                    FAnomalias.PonAnotacionFmt(TRAZA_SIEMPRE,1,FICHERO_ACTUAL,'Resumen Diario Cancelado por: %s', [E.message]);
                    MessageDlg('Generación de Resumen Diario.', 'El Resumen Diario no puede generarse en este instante: ' + E.message + #10 + #13 + 'Espere unos minutos, e intentelo de nuevo', mtError, [mbOk], mbOk, 0)
                end
            end
        finally
            Free;
            Application.ProcessMessages;
        end;
    END;

    function TResumenDiarioADM.PutEstacion : string;
    begin
        NombreEstacion := fVarios.NombreEstacion;
        NumeroEstacion := Format('%d'+'%d',[fVarios.Zona, fVarios.CodeEstacion]);
        Result := NumeroEstacion + ' ' + NombreEstacion;
    end;

    procedure TResumenDiarioADM.DoResumenDiario;
    begin
        DeleteTable(MyBD, 'TTMPREPORTEADM');

        {agregamos el alter session porque sino saltaba error en el procedimiento al
         calcular la menor fecha}
        with tsqlquery.create(self) do       //
        try
          SQLConnection := mybd;
          sql.add('alter session set nls_date_format = ''DD/MM/YYYY HH24:MI:SS''');
          execsql;
        finally
          free;
        end;

        with TSQLStoredProc.Create(self) do
        try
            SQLConnection := MyBD;
            StoredProcName := 'PQ_REPORTE_ADM.DoReporteADM_V2';

            ParamByName('vAUTOSMP').Value := 0;
            ParamByName('vMOTOSMP').Value := 0;
            ParamByName('vAUTOSEP').Value := 0;
            ParamByName('vMOTOSEP').Value := 0;

            ParamByName('vImporteAutosMP').Value := 0;
            ParamByName('vImporteMotosMP').Value := 0;
            ParamByName('vImporteAutosEP').Value := 0;
            ParamByName('vImporteMotosEP').Value := 0;

            ParamByName('vIvaAutosMP').Value := 0;
            ParamByName('vIvaMotosMP').Value := 0;
            ParamByName('vIvaAutosEP').Value := 0;
            ParamByName('vIvaMotosEP').Value := 0;

            ParamByName('vIIBBAutosMP').Value := 0;
            ParamByName('vIIBBMotosMP').Value := 0;
            ParamByName('vIIBBAutosEP').Value := 0;
            ParamByName('vIIBBMotosEP').Value := 0;

            ParamByName('vServPresAutosMP').Value := 0;
            ParamByName('vServPresMotosMP').Value := 0;
            ParamByName('vServPresAutosEP').Value := 0;
            ParamByName('vServPresMotosEP').Value := 0;

            ParamByName('vServPresImporteAutosMP').Value := 0;
            ParamByName('vServPresImporteMotosMP').Value := 0;
            ParamByName('vServPresImporteAutosEP').Value := 0;
            ParamByName('vServPresImporteMotosEP').Value := 0;

            ParamByName('vServPendAutosMP').Value := 0;
            ParamByName('vServPendMotosMP').Value := 0;
            ParamByName('vServPendAutosEP').Value := 0;
            ParamByName('vServPendMotosEP').Value := 0;

            ParamByName('vServPendImporteAutosMP').Value := 0;
            ParamByName('vServPendImporteMotosMP').Value := 0;
            ParamByName('vServPendImporteAutosEP').Value := 0;
            ParamByName('vServPendImporteMotosEP').Value := 0;

            Prepared := true;
            ParamByName('FECHAINI').Value := DateIni;
            ParamByName('FECHAFIN').Value := DateFin;
            ExecProc;

            Cantidad_Autos_MP.Text := ParamByName('vAUTOSMP').value;
            Cantidad_Motos_MP.Text := ParamByName('vMOTOSMP').value;
            ImporteAutoMP.Text := ParamByName('vImporteAutosMP').value;
            ImporteMotoMP.Text := ParamByName('vImporteMotosMP').value;
            IVAAutoMP.Text := ParamByName('vIvaAutosMP').value;
            IVAMotoMP.Text := ParamByName('vIvaMotosMP').value;
            IIBBAutoMP.Text := ParamByName('vIIBBAutosMP').value;
            IIBBMotoMP.Text := ParamByName('vIIBBMotosMP').value;

            MontoTotalAutoMP.Text := (ParamByName('vImporteAutosMP').value)+(ParamByName('vIvaAutosMP').value)+(ParamByName('vIIBBAutosMP').value);
            MontoTotalMotoMP.Text := (ParamByName('vImporteMotosMP').value)+(ParamByName('vIvaMotosMP').value)+(ParamByName('vIIBBMotosMP').value);

            Cantidad_Autos_EP.Text := ParamByName('vAUTOSEP').value;
            Cantidad_Motos_EP.Text := ParamByName('vMOTOSEP').value;
            ImporteAutoEP.Text := ParamByName('vImporteAutosEP').value;
            ImporteMotoEP.Text := ParamByName('vImporteMotosEP').value;
            IVAAutoEP.Text := ParamByName('vIvaAutosEP').value;
            IVAMotoEP.Text := ParamByName('vIvaMotosEP').value;
            IIBBAutoEP.Text := ParamByName('vIIBBAutosEP').value;
            IIBBMotoEP.Text := ParamByName('vIIBBMotosEP').value;

            MontoTotalAutoEP.Text := (ParamByName('vImporteAutosEP').value)+(ParamByName('vIvaAutosEP').value)+(ParamByName('vIIBBAutosEP').value);
            MontoTotalMotoEP.Text := (ParamByName('vImporteMotosEP').value)+(ParamByName('vIvaMotosEP').value)+(ParamByName('vIIBBMotosEP').value);
            
            Cantidad_Autos_Global.Text := (ParamByName('vAUTOSMP').value)+(ParamByName('vAUTOSEP').value);
            Cantidad_Motos_Global.Text := (ParamByName('vMOTOSMP').value)+(ParamByName('vMOTOSEP').value);
            ImporteAutosGlobal.Text := (ParamByName('vImporteAutosMP').value)+(ParamByName('vImporteAutosEP').value);
            ImporteMotosGlobal.Text := (ParamByName('vImporteMotosMP').value)+(ParamByName('vImporteMotosEP').value);
            IVAAutosGlobal.Text := (ParamByName('vIvaAutosMP').value)+(ParamByName('vIvaAutosEP').value);
            IVAMotosGlobal.Text := (ParamByName('vIvaMotosMP').value)+(ParamByName('vIvaMotosEP').value);
            IIBBAutosGlobal.Text := (ParamByName('vIIBBAutosMP').value)+(ParamByName('vIIBBAutosEP').value);
            IIBBMotosGlobal.Text := (ParamByName('vIIBBMotosMP').value)+(ParamByName('vIIBBMotosEP').value);

            MontoAutosGlobal.Text := (ParamByName('vImporteAutosMP').value)+(ParamByName('vIvaAutosMP').value)+(ParamByName('vIIBBAutosMP').value)+
                                     (ParamByName('vImporteAutosEP').value)+(ParamByName('vIvaAutosEP').value)+(ParamByName('vIIBBAutosEP').value);
            MontoMotosGlobal.Text := (ParamByName('vImporteMotosMP').value)+(ParamByName('vIvaMotosMP').value)+(ParamByName('vIIBBMotosMP').value)+
                                     (ParamByName('vImporteMotosEP').value)+(ParamByName('vIvaMotosEP').value)+(ParamByName('vIIBBMotosEP').value);

            MPAutosServPrestadosCantidad.text := ParamByName('vServPresAutosMP').Value;
            MPMotosServPrestadosCantidad.text := ParamByName('vServPresMotosMP').Value;
            MPTotalServPrestadosCantidad.text :=(ParamByName('vServPresAutosMP').Value)+(ParamByName('vServPresMotosMP').Value);

            EPAutosServPrestadosCantidad.text := ParamByName('vServPresAutosEP').Value;
            EPMotosServPrestadosCantidad.text := ParamByName('vServPresMotosEP').Value;
            EPTotalServPrestadosCantidad.text :=(ParamByName('vServPresAutosEP').Value)+(ParamByName('vServPresMotosEP').Value);

            MPAutosServPrestadosCash.text := ParamByName('vServPresImporteAutosMP').Value;
            MPMotosServPrestadosCash.text := ParamByName('vServPresImporteMotosMP').Value;
            MPTotalServPrestadosCash.text :=(ParamByName('vServPresImporteAutosMP').Value)+(ParamByName('vServPresImporteMotosMP').Value);

            EPAutosServPrestadosCash.text := ParamByName('vServPresImporteAutosEP').Value;
            EPMotosServPrestadosCash.text := ParamByName('vServPresImporteMotosEP').Value;
            EPTotalServPrestadosCash.text :=(ParamByName('vServPresImporteAutosEP').Value)+(ParamByName('vServPresImporteMotosEP').Value);

            MPAutosServPendientesCantidad.Text := ParamByName('vServPendAutosMP').Value;
            MPMotosServPendientesCantidad.Text := ParamByName('vServPendMotosMP').Value;
            MPTotalServPendientesCantidad.Text := (ParamByName('vServPendAutosMP').Value)+(ParamByName('vServPendMotosMP').Value);

            EPAutosServPendientesCantidad.Text := ParamByName('vServPendAutosEP').Value;
            EPMotosServPendientesCantidad.Text := ParamByName('vServPendMotosEP').Value;
            EPTotalServPendientesCantidad.Text := (ParamByName('vServPendAutosEP').Value)+(ParamByName('vServPendMotosEP').Value);

            MPAutosServPendientesCash.Text := ParamByName('vServPendImporteAutosMP').Value;
            MPMotosServPendientesCash.Text := ParamByName('vServPendImporteMotosMP').Value;
            MPTotalServPendientesCash.Text := (ParamByName('vServPendImporteAutosMP').Value)+(ParamByName('vServPendImporteMotosMP').Value);

            EPAutosServPendientesCash.Text := ParamByName('vServPendImporteAutosEP').Value;
            EPMotosServPendientesCash.Text := ParamByName('vServPendImporteMotosEP').Value;
            EPTotalServPendientesCash.Text := (ParamByName('vServPendImporteAutosEP').Value)+(ParamByName('vServPendImporteMotosEP').Value);

            TTAutosServCantidad.Text := (ParamByName('vServPresAutosMP').Value)+(ParamByName('vServPresAutosEP').Value)+
                                        (ParamByName('vServPendAutosMP').Value)+(ParamByName('vServPendAutosEP').Value);

            TTMotosServCantidad.Text := (ParamByName('vServPresMotosMP').Value)+(ParamByName('vServPresMotosEP').Value)+
                                        (ParamByName('vServPendMotosMP').Value)+(ParamByName('vServPendMotosEP').Value);

            TTotalServCantidad.Text := (ParamByName('vServPresAutosMP').Value)+(ParamByName('vServPresAutosEP').Value)+
                                       (ParamByName('vServPendAutosMP').Value)+(ParamByName('vServPendAutosEP').Value)+
                                       (ParamByName('vServPresMotosMP').Value)+(ParamByName('vServPresMotosEP').Value)+
                                       (ParamByName('vServPendMotosMP').Value)+(ParamByName('vServPendMotosEP').Value);

            TTAutosServCash.Text := (ParamByName('vServPresImporteAutosMP').Value)+(ParamByName('vServPresImporteAutosEP').Value)+
                                    (ParamByName('vServPendImporteAutosMP').Value)+(ParamByName('vServPendImporteAutosEP').Value);

            TTMotosServCash.Text := (ParamByName('vServPresImporteMotosMP').Value)+(ParamByName('vServPresImporteMotosEP').Value)+
                                    (ParamByName('vServPendImporteMotosMP').Value)+(ParamByName('vServPendImporteMotosEP').Value);

            TTotalServCash.Text := (ParamByName('vServPresImporteAutosMP').Value)+(ParamByName('vServPresImporteAutosEP').Value)+
                                   (ParamByName('vServPendImporteAutosMP').Value)+(ParamByName('vServPendImporteAutosEP').Value)+
                                   (ParamByName('vServPresImporteMotosMP').Value)+(ParamByName('vServPresImporteMotosEP').Value)+
                                   (ParamByName('vServPendImporteMotosMP').Value)+(ParamByName('vServPendImporteMotosEP').Value);

            finally
              free;
            end;
        Close;
    end;

procedure TResumenDiarioADM.FormCreate(Sender: TObject);
    begin
        bErrorCreando := False;

        if (not MyBD.InTransaction) then MyBD.StartTransaction(td);
        try
            LoockAndDeleteTable(MyBD, 'TTMPREPORTEADM');

        except
            on E:Exception do
            begin
                FAnomalias.PonAnotacionFmt(TRAZA_SIEMPRE,4,FICHERO_ACTUAL,'Resumen Diario Cancelado por: %s', [E.message]);
                MessageDlg('Generación de Resumen Diario.', 'El Resumen Diario no puede generarse en este instante: ' + E.message + #10 + #13 + 'Espere unos minuts, e intentelo de nuevo', mtError, [mbOk], mbOk, 0);
                bErrorCreando := True
            end
        end
    end;

procedure TResumenDiarioADM.SBBusquedaClick(Sender: TObject);
begin
    try
        Enabled := False;
        try
            If not GetDates(DateIni,DateFin) then Exit;

            FTmp.Temporizar(TRUE,FALSE,'Resumen Diario', 'Generando el Resumen Diario.');

            Application.ProcessMessages;

            Caption := Format('Resumen Diario. Planta: %S. (%S - %S)', [PutEstacion,Copy(DateIni,1,10), Copy(DateFin,1,10)]);

            DoResumenDiario;

            FTmp.Temporizar(FALSE,FALSE,'', '');

        except
            on E: Exception do
            begin
                FTmp.Temporizar(FALSE,FALSE,'', '');
                Application.ProcessMessages;
                FAnomalias.PonAnotacionFmt(TRAZA_SIEMPRE,1,FICHERO_ACTUAL,'Informe Cancelado por: %s', [E.message]);
                MessageDlg('Generación de Informes.', 'El informe no puede generarse en este instante: ' + E.message + #10 + #13 + 'Espere unos minutos, e intentelo de nuevo', mtError, [mbOk], mbOk, 0)
            end
        end
    finally
        Enabled := True;
        Show;
        Application.ProcessMessages;
    end;
end;

procedure TResumenDiarioADM.FormDestroy(Sender: TObject);
begin
     try
        try
            if MyBD.InTransaction then MyBD.Rollback(td) // MyBD.Commit
            else raise Exception.Create('Se ha perdido la transacción de Bloqueo de la tabla temporal del informe de Resumen Diario')
        except
            on E: Exception do
            begin
                FAnomalias.PonAnotacionFmt(TRAZA_SIEMPRE,6,FICHERO_ACTUAL,'Error cerrando la ficha de Resumen Diario: %s', [E.message]);
                MessageDlg('Generación de Informe.', 'Perdida de Transacciones: ' + E.message + #10 + #13 + 'Espere unos minutos e intentelo otra vez' , mtError, [mbOk], mbOk, 0)
            end
        end
    finally
        FTmp.Temporizar(FALSE,FALSE,'','');
    end
end;

procedure TResumenDiarioADM.OnClose (Sender: TObject);
begin
    FTmp.Temporizar(TRUE,FALSE,'Informes','Cerrando Excel.');
    Enabled := TRUE;
end;

procedure TResumenDiarioADM.OnOpen (Sender: TObject);
begin
    FTmp.Temporizar(TRUE,FALSE,'Informes','Abriendo Excel y exportando los datos.');
    Enabled := FALSE;
end;

procedure TResumenDiarioADM.SBSalirClick(Sender: TObject);
begin
    FTmp.Temporizar(TRUE,FALSE,'Informes','Restableciendo las tablas temporales');
    ModalResult := mrOk;
end;

end.
