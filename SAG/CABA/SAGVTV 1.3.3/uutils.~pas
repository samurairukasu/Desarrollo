unit UUtils;
{ Utilidades generales }

interface

   uses
      Classes, SQLExpr, StdCtrls, forms, buttons, DBCtrls, RXDBCtrl, UCEdit, uSagEstacion,
      speedbar, comctrls,ExtCtrls, ToolEdit, RxLookup, quickrpt, qrctrls, dbclient, Comobj,
      Provider;


   procedure DeleteTable(const aBD: tSQLConnection; const sTable: string);
   procedure LoockAndDeleteTable (const aBD: tSQLConnection; const sTable : string);
   function ConviertePuntoEnComa (const s: string): string;
    function ConvierteEnteroSinPunto (const s: string): string;
   function ConvierteComaEnPunto (const s: string): string;
   function ConvierteComaEnPtoMasDec (const s: string): string;   
   // Devuelve True si el usuario ha introducido la fecha en un formato correcto
   function FechaCorrecta (F: string): boolean;
   function HoraCorrecta (H: string): boolean;
   // Devuelve True si sF1 es anterior a sF2
   function EsFechaMenor (sF1, sF2: string): boolean;
   // True si dH1 es menor o igual que dH2
   function Es_Hora_Menor (dH1, dH2: tDateTime): boolean;
   // True si es número real o entero
   function Es_Numero(sCadena: string): boolean;
   // Se pone el backslash en el directorio si no lo tiene
   function PonerBackSlash (const s : string) : string;
   // Devuelve True si la impresora está lista para imprimir un informe
   function ImpresoraPreparada_ImprimirInformes: boolean;
   // Muestra al usuario un mensaje de error porque la impresora NO puede imprimir en el Mantenimiento
   procedure Lanzar_ErrorImpresion_Mantenimiento;
   { Hay que tener cuidado por si el usuario quiere salir del form pulsando
     Alt+F4, en cuyo caso habrá que asociar dicha combinación de teclas con
     el código del evento asociado al pulsar el botón de Cancelar }
   function Ha_Pulsado_AltF4 (EstadoShift:TShiftState ; TPulsada: Word): boolean;

   //   procedure AbrirTabla (UnaTabla : tClientDataSet);  { TODO -oran -cconsultas : esta bien asi??? }

   procedure AbrirTabla (UnaTabla : tClientDataSet);
   // Devuelve en qué posición del combo box se encuentra NombreTipo
   function Devolver_Posicion_ComboBox (Elementos: TStrings; NumElem: integer; NombreTipo: string):integer;
   procedure Combo_ConTeclas (Combo: TComboBox; var Tecla: word);
   // Devuelve True si el nº oblea se ha introducido correctamente, es decir, si el formato es dd-dddddd
   function NumObleaCorrecto (sOblea: string): boolean;
   { Dado un nº oblea con el formato aa-bbbbbb (siendo a y b dígitos) devuelve:
         - bbbbbb   si bbbbbb <= 999999 y
         - aabbbbbb si bbbbbb >  999999 }
   function NumObleaGNCCorrecto (sOblea: string): boolean;

   function Devolver_NumeroOblea (sOblea: string): integer;
   { Suma 1900 si el año está comprendido entre 70-99 y Suma 2000 si iAnio está
     comprendido entre 00-69. Devuelve 0 si se ha producido algún error }
   function Sumar_1900 (iAnio: integer): integer;
   // Dado un nº con el formato: 96 00020003123456 devuelve 96 y dado 01 00020003123456 devuelve 2001
   function Obtener_Ejercicio (sNumInsp: string): integer;
   // Dado un nº con el formato: 96 00020003123456 devuelve 123456
   function Obtener_NumeroInspeccion (sNumInsp: string): integer;

{ TODO -oran -cconsultas : esta bien asi??? }
   function ExisteRegistro (UnaTabla : tClientDataSet; UnasColumnas : string; UnosValores : Variant) : boolean;

   // Devuelve true si el nro de cuit introducido es correcto   //
   function CuitCorrecto (nrocuit: string):boolean;
   // Devuelve un nro de CUIT/CUIL sin los guiones
   function cuitsinguion(anrocuit: string):widestring;
   // Dado el tipo de iva que se tiene, se devuelve la letra correcta para el controlador
   function TipoIva (atipoiva: string):widestring;
   // Devuelve un nombre con sólo caracteres válidos para un controlador fiscal
   function StringParaCF (anombre: string):widestring;
   // Devuelve una cadena con ceros a la izquierda
   function FormatoCeros (anumero: longint; acantidad: longint):string;
   // Funciones que muestran o activan 1 o varios componentes
   procedure ActivarComponentes(Modo: boolean; formulario: TForm; atag: tTagSet);
   procedure MostrarComponentes(Modo: boolean; formulario: TForm; atag: ttagset);
   //Mueve para arriba o abajo un componente de QuickReport
   procedure MuevoComponentes(formulario: TForm; atag: ttagset; adelta: integer);
   //Cambia el Height de un componente
   procedure HeightComponentes(formulario: TForm; atag: ttagset; adelta: integer);
   function DevuelveUsuario(aBD: tSQLConnection):string;

//********************************** VERSION SAG 4.00 **********************************************
   Function GetOblea(vAnioVenci:Integer; aConexion:TSQLConnection): String;
   Procedure RestoreOblea(vOblea, vAnioVenci:Integer; aConexion:TSQLConnection);
   Procedure CommitOblea(vOblea, vAnioVenci, vEjercici, vCodInspe:String; aConexion:TSQLConnection);
   Function GetUserName : String;
   Function ObleaDisponible(vOblea,vAnioVenci: Integer; aConexion:TSQLConnection): Boolean;
   Procedure GetNewOblea(nOblea,vAnioVenci:Integer; aConexion:TSQLConnection);
   Function ObleasEnStock(vAnioVenci: Integer; aConexion:TSQLConnection): Boolean;
   Function GetFullUserName : String;
//**************************************************************************************************

   Function Total_Defectos(Ejercicio, Inspeccion: Integer):Integer; //Lucho
   Function IsRevePreverification(const Patente:String) : boolean; // Lucho

implementation

   uses
      SysUtils,
      //Forms,
      Printers,
      QrPrnTr,
      UCDIALGS,
      ULOGS,DB,
      Windows,
      Messages,
      globals,
      DBXpress,
      USagClasses,
      acceso1,
      acceso,
      UGAcceso;

   const
       PRIMER_ANIO_SIGLO20 = 70; { El 1er. año del siglo XX a tener en cuenta es 1970 }
       ULTIMO_ANIO_SIGLO20 = 99; { El último año del siglo XX a tener en cuenta es 1999 }



   resourcestring
       CARACTER_REVERIFICACION = 'R';
       PUNTO = '.';
       COMA = ',';

       FICHERO_ACTUAL = 'UUtils';

       MSJ_COM_IMPRBUSY = 'Lo siento pero la impresora se encuentra recibiendo un nuevo trabajo de impresión';
       MSJ_COM_ERRORIMPR = 'Lo siento pero la impresora no está preparada para aceptar nuevos trabajos de impresión. Verifique que la impresora funcione correctamente';
       MSJ_ENTDTCOM_IMPRESOCUP = 'Lo siento pero la impresora está ocupada recibiendo y/o imprimiendo un trabajo. Por favor, inténtelo de nuevo.';


//********************************** VERSION SAG 4.00 **********************************************

Function ObleasEnStock(vAnioVenci: Integer; aConexion:TSQLConnection): Boolean;
Begin
Result:=false;
With TSQLQuery.Create(Application) do
  try
    Close;
    SQLConnection := aConexion;
    SQL.Add('SELECT * FROM TOBLEAS WHERE ANIO = :ANIO AND ESTADO=:DISPONIBLE ');
    Params[0].AsInteger:=vAnioVenci;
    Params[1].AsString:=DISPONIBLE;
    Open;
      try
        if not (Fields[0].IsNull) then
          Result:=true
      Except
        On E: Exception do
          MessageDlg ('ERROR','Se ha producido un error: '+#13#10+E.Message, mtWarning, [mbOk],mbOk, 0);
      end;
  finally
    Free;
  end;
end;



Function ObleaDisponible(vOblea, vAnioVenci: Integer; aConexion:TSQLConnection): Boolean;
Begin
Result:=false;
With TSQLQuery.Create(Application) do
  try
    Close;
    SQLConnection := aConexion;
    SQL.Add('SELECT MIN(NUMOBLEA) FROM TOBLEAS WHERE NUMOBLEA = :NUMOBLEA AND ANIO = :ANIO AND ESTADO = :DISPONIBLE');
    Params[0].AsInteger:=vOblea;
    Params[1].AsInteger:=vAnioVenci;
    Params[2].AsString:=DISPONIBLE;
    Open;
      try
        if not (Fields[0].IsNull) then
          Result:=true
        else
          MessageDlg ('ERROR','LA OBLEA INTRODUCIDA NO ESTA DISPONIBLE!'+#13#10+'O NO CORRESPONDE AL AÑO DE VENCIMIENTO', mtWarning, [mbOk],mbOk, 0);
      Except
        On E: Exception do
          MessageDlg ('ERROR','Se ha producido un error: '+#13#10+E.Message, mtWarning, [mbOk],mbOk, 0);
      end;
  finally
    Free;
  end;
end;


Function GetOblea(vAnioVenci:Integer; aConexion:TSQLConnection): String;
var
GOblea: String;
begin
With TSQLQuery.Create(nil) do
  try
    SQLConnection:=aConexion;
    Close;
    SQL.Clear;
    SQL.Add('Select MIN(NUMOBLEA), ESTADO FROM TOBLEAS WHERE ESTADO=:DISPONIBLE AND ANIO = :ANIOVENCI GROUP BY ESTADO');
    Params[0].AsString:=DISPONIBLE;
    Params[1].AsInteger:=vAnioVenci;
    open;
    GOblea:= Fields[0].Value;
    Result:=GOblea;
    If Fields[1].Value = DISPONIBLE then
      Begin
        SQL.Clear;
        SQL.Add('UPDATE TOBLEAS SET ESTADO = :TOMADA WHERE ANIO = :ANIOVENCI AND NUMOBLEA = :NUMOBLEA');
        Params[0].Value:=TOMADA;
        Params[1].Value:=vAnioVenci;
        Params[2].Value:=GOblea;
        ExecSQL;
      end;
  Finally
    free;
  end;
end;


Procedure GetNewOblea(nOblea,vAnioVenci:Integer; aConexion:TSQLConnection);
begin
With TSQLQuery.Create(nil) do
  Begin
    try
      SQLConnection:=aConexion;
      Close;
      SQL.Clear;
      SQL.Add('UPDATE TOBLEAS SET ESTADO = :TOMADA WHERE ANIO = :ANIOVENCI AND NUMOBLEA = :NUMOBLEA');
      Params[0].Value:=TOMADA;
      Params[1].Value:=vAnioVenci;
      Params[2].Value:=nOblea;
      ExecSQL;
    Except
      on E:Exception do
       ShowMessage('',E.Message);
    end;
  end;
end;


Procedure CommitOblea(vOblea, vAnioVenci, vEjercici, vCodInspe:String; aConexion:TSQLConnection);
begin
With TSQLQuery.Create(nil) do
  Begin
    SQLConnection:=aConexion;
    Close;
    SQL.Clear;
    SQL.Add('UPDATE TOBLEAS SET ESTADO = :CONSUMIDO, EJERCICI = :EJERCICI, CODINSPE = :CODINSPE, FECHA_CONSUMIDA = :FECHA_C WHERE NUMOBLEA = :NUMOBLEA AND ANIO = :ANIOVENCI');
    Params[0].Value:=CONSUMIDA;
    Params[1].Value:=vEjercici;
    Params[2].Value:=vCodInspe;
    Params[3].Value:=Now;
    Params[4].Value:=vOblea;
    Params[5].Value:=vAnioVenci;
    ExecSQL;
  end;
end;


Procedure RestoreOblea(vOblea, vAnioVenci:Integer; aConexion:TSQLConnection);
begin
With TSQLQuery.Create(nil) do
  Begin
    SQLConnection:=aConexion;
    Close;
    SQL.Clear;
    SQL.Add('UPDATE TOBLEAS SET ESTADO = ''S'' WHERE ANIO = :ANIOVENCI AND NUMOBLEA = :NUMOBLEA');
    Params[0].AsInteger:=vAnioVenci;
    Params[1].AsInteger:=vOblea;
    ExecSQL;

    close;
    free;
  end;
end;


function GetUserName : String;
var
usuario: Tusuario;
usuariotabla: tusuarios;
i,idusuario: integer;
begin
  usuario:=gestorseg.BuscarUsuario(applicationuser);
  idusuario:=usuario.obteneruid;
  usuariotabla:=tusuarios.CreateFromDataBase(mybd,DATOS_USUARIO,FORMAT('WHERE IDUSUARIO = %D',[idusuario]));
  usuariotabla.open;
  Result:=usuariotabla.ValueByName[FIELD_NOMBRE];
end;


function GetFullUserName : String;
var
usuario: Tusuario;
usuariotabla: tusuarios;
i,idusuario: integer;
begin
  usuario:=gestorseg.BuscarUsuario(applicationuser);
  idusuario:=usuario.obteneruid;
  usuariotabla:=tusuarios.CreateFromDataBase(mybd,DATOS_USUARIO,FORMAT('WHERE IDUSUARIO = %D',[idusuario]));
  usuariotabla.open;
  Result:=' '+usuariotabla.ValueByName[FIELD_ADICIONAL]+': '+usuariotabla.ValueByName[FIELD_NOMBRE];
end;

///////////////////////////////////// LUCHO ////////////////////////////////////////////////////////
Function Total_Defectos(Ejercicio, Inspeccion: Integer): Integer;
Var
DEF1, DEF2: Integer;
Consulta: TSQLQuery;
Begin
Consulta:= TSQLQuery.create(application);
  try
    With Consulta do
      try
        Begin
          SQLConnection:=MyBD;
          Close;
          SQL.Clear;
          SQL.Add('SELECT (SELECT COUNT(*) FROM TDATINSPEVI D WHERE D.CODINSPE = :CODINSPE AND D.EJERCICI = :EJERCICIO AND D.CALIFDEF IN (1,2,3))');
          SQL.Add('+ (SELECT COUNT(* ) FROM TINSPDEFECT I WHERE I.CODINSPE = :CODINSPE AND I.EJERCICI = :EJERCICIO AND I.CALIFDEF IN (1,2,3)) FROM DUAL');
          Params[0].Value:= Inspeccion;
          Params[1].Value:= Ejercicio;
          Open;
          Result:=Fields[0].AsInteger;
        end;
      except
        on E: Exception do
          fAnomalias.PonAnotacionFmt(TRAZA_SIEMPRE,0,FICHERO_ACTUAL,'No obtuvo el codigo de frecuencia del vehículo por: %S',[E.message]);
      end;
  finally
    Consulta.Close;
    Consulta.Free;
  end;
end;


function IsRevePreverification(const Patente:String) : boolean;
var
CantReg: Integer;
Consulta: TSQLQuery;
intcarry:string;
Begin
//martin 06-06-2012  para suma le valor del carry en las reverificaciones de preve
with fvarios do
begin
    try
    intcarry:=valuebyName[FIELD_CARRY];
    finally
        free;
    end;


end;




Consulta:= TSQLQuery.create(application);
  try
    With Consulta do
      try
        Begin
          SQLConnection:=MyBD;
          Close;
          SQL.Clear;
          SQL.Add('select Count(CODINSPE) from tinspeccion I, TVEHICULOS V  where I.TIPO = ''B''  and  ((I.FECVENCI + to_number(:intcarry)) >= SysDate ) and ');
          SQL.Add('I.CODFACTU is null and I.CODVEHIC = V.CODVEHIC and V.PATENTEN = :Patente');
          Params[0].AsSTRING:=intcarry;
          Params[1].AsString:=Patente;

          Open;
          CantReg:=Fields[0].AsInteger;
          If (CantReg > 0) Then
            Result:=True
          else
            Result:=false;
        end;
      except
        on E: Exception do
          fAnomalias.PonAnotacionFmt(TRAZA_SIEMPRE,0,FICHERO_ACTUAL,'Se ha producido un error: %S',[E.message]);
      end;
  finally
    Consulta.Close;
    Consulta.Free;
  end;
end;
////////////////////////////////////////////////////////////////////////////////////////////////////

//**************************************************************************************************
//**************************************************************************************************

(*
   function Devolver_Porcentaje (const fCantidad, fPorcen: double): double;
   begin
       Result := (fCantidad * fPorcen)/100;
   end;
*)

   procedure DeleteTable(const aBD: tSQLConnection; const sTable: string);
   begin
       with TsqlQuery.Create(application) do
       try
           SQLConnection := aBD;
           SQL.Add(Format('DELETE %s',[sTable]));
           ExecSQL;
           Close;
       finally
           Application.ProcessMessages;
           Free
       end
   end;

   procedure LoockAndDeleteTable (const aBD: tSQLConnection; const sTable : string);
   begin
       with TsqlQuery.Create(application) do
       try
           SQLConnection := aBD;

           Sql.Add (Format('LOCK TABLE %s IN EXCLUSIVE MODE NOWAIT',[sTable]));
           ExecSQL;
           Close;
       finally
           Application.ProcessMessages;
           Free
       end;
       DeleteTable(aBD, sTable)
   end;

   function ConvierteEnteroSinPunto (const s: string): string;
   begin
   {   una o dos cifras decimales }
      if (Pos('.', s) = 0) then { Es un nº entero }
          Result := s
  else

   end;

   function ConviertePuntoEnComa (const s: string): string;
   begin

       { una o dos cifras decimales }
       if (Pos('.', s) = 0) then { Es un nº entero }
          Result := s
        else if (Pos(PUNTO, s) = Length (s)-3) then
          Result := copy (s, 1, length(s)-4) + COMA + copy (s, pos (punto,s)+1, length(s))
       else if (Pos(PUNTO, s) = Length (s)-2) then
          Result := copy (s, 1, length(s)-3) + COMA + copy (s, pos (punto,s)+1, length(s))
       else if (Pos(PUNTO, s) = Length (s)-1) then
          Result := copy (s, 1, length(s)-2) + COMA + copy (s, pos (punto,s)+1, length(s))
   end;


   function ConvierteComaEnPunto (const s: string): string;
   begin
       { una o dos cifras decimales }
       if (Pos(COMA, s) = 0) then { Es un nº entero }
          Result := s
       else if (Pos(COMA, s) = Length (s)-2) then
          Result := copy (s, 1, length(s)-3) + PUNTO + copy (s, pos (COMA,s)+1, length(s))
       else if (Pos(COMA, s) = Length (s)-1) then
          Result := copy (s, 1, length(s)-2) + PUNTO + copy (s, pos (COMA,s)+1, length(s))
   end;

   function ConvierteComaEnPtoMasDec (const s: string): string;
   var
     i : integer;
   begin
       { una o dos cifras decimales }
       if (Pos(COMA, s) = 0) then { Es un nº entero }
          Result := s
       else
         for i := length(s) downto 1 do
           if (Pos(COMA, s) = Length (s)-i) then
             Result := copy (s, 1, length(s)-i-1
             ) + PUNTO + copy (s, pos (COMA,s)+1, length(s))
   end;


(*
   function Es_NumeroReal_Valido (Cadena: string): boolean;
   { Devuelve True si Cadena puede pasarse a número real }
   var
      fNumero: double;
      CodigoError: integer;

   begin
       {$IFDEF TRAZAS}
         //FTrazas.PonAnotacionFmt (TRAZA_FLUJO, 8, FICHERO_ACTUAL, 'Entrada en Es_NumeroReal_Valido %s', [Cadena]);
       {$ENDIF}
       Val (Cadena, fNumero, CodigoError);
       Result := (CodigoError = 0);
       {$IFDEF TRAZAS}
         //FTrazas.PonAnotacion (TRAZA_FLUJO, 9, FICHERO_ACTUAL, 'Salida de Es_NumeroReal_Valido');
       {$ENDIF}
   end;
*)

   // Devuelve True si el usuario ha introducido la fecha en un formato correcto
   function FechaCorrecta (F: string): boolean;
   begin { de FechaCorrecta }
       try
          StrToDate (F);
          Result := True;
       except
          on E:Exception do
          begin
              Result := False;
          end;
       end;
   end; { de FechaCorrecta }


   function HoraCorrecta (H: string): boolean;
   { Devuelve True si el usuario ha introducido la fecha en un formato correcto }
   begin { de HoraCorrecta }
       try
          StrToTime (H);
          Result := True;
       except
          on E:Exception do
          begin
              Result := False;
          end;
       end;
   end; { de HoraCorrecta }


   function Es_Hora_Menor (dH1, dH2: tDateTime): boolean;
   begin
       Result := (dH1 <= dH2);
   end;

   function Es_Numero(sCadena: string): boolean;
   begin
       Result := False;
       try
          StrToFloat(sCadena);
          Result := True;
       except
           on E:Exception do;
       end;
   end;

   // Se pone el backslash en el directorio si no lo tiene
   function PonerBackSlash (const s : string) : string;
   begin
     if s[length(s)] <> '\' then result := s + '\'
     else result := s;
   end;

   // Devuelve True si la impresora está lista para imprimir un informe
   function ImpresoraPreparada_ImprimirInformes: boolean;
   const
      NUM_REINTENTOS_INFORME = 20;  { Máximo número de reintentos para imprimir un
                                     informe }
   var
     iNumReintentos, iContador: integer; { actúan a modo de índices }

     {$IFDEF TRAZAS}
       sEstadoImpresora: string;
     {$ENDIF}

   begin
       Result := False;
       iNumReintentos := 0;
       try
       {mar-compila}
           repeat
                inc (iNumReintentos);
                if (iNumReintentos <> 1) then
                begin
                    for iContador := 1 to 1000 do; { bucle de retardo }
                end;
                {$IFDEF TRAZAS}
                    FTrazas.PonAnotacion (TRAZA_BUCLES,4,FICHERO_ACTUAL,'Reintento ' + inttostr(iNumReintentos));
                    sEstadoImpresora := '';

                    if (QRPrinter.Status = mpBusy) then
                       sEstadoImpresora := 'Impresora Ocupada'
                    else if (QRPrinter.Status = mpFinished) then
                       sEstadoImpresora := 'Se ha finalizado un trabajo'
   (*                 else if (QRPrinter.Status = mpPrinting) then
                       sEstadoImpresora := 'Se está enviando un trabajo a la impresora'
                    else if (QRPrinter.Status = mpPreviewing) then
                       sEstadoImpresora := 'Está activo un preview'*)
                    else if (QRPrinter.Status = mpReady) then
                       sEstadoImpresora := 'Impresora preparada para aceptar nuevos trabajos'
                    else if (Printer.Printing) then
                       sEstadoImpresora := 'Impresora imprimiendo';

                    FTrazas.PonAnotacion (TRAZA_BUCLES,5,FICHERO_ACTUAL,'  Estado: ' + sEstadoImpresora);
                {$ENDIF}
           until (((QRPrinter.Status = mpReady) and (not Printer.Printing)) or (iNumReintentos = NUM_REINTENTOS_INFORME));
           if ((QRPrinter.Status = mpReady) and (not Printer.Printing)) then
              Result := True
           else
              MessageDlg ('Impresión', MSJ_ENTDTCOM_IMPRESOCUP, mtInformation,[mbOk], mbOk, 0)
       except
            on E:Exception do
               FAnomalias.PonAnotacion (TRAZA_SIEMPRE,17,FICHERO_ACTUAL,'Error en ImpresoraPreparada_ImprimirInformes: ' + E.Message);
       end;
   end;

   // Muestra al usuario un mensaje de error porque la impresora NO puede imprimir en el Mantenimiento
   procedure Lanzar_ErrorImpresion_Mantenimiento;
   const
       CABECERA_IMPRESION = 'Impresión';

   begin
       {mar-compila}
       if (QRPrinter.Status = mpBusy) then
       begin
           MessageDlg (CABECERA_IMPRESION, MSJ_COM_IMPRBUSY, mtInformation, [mbOk],mbOk, 0);
       end
   (*    else if (QRPrinter.Status = mpPrinting) then
       begin
           MessageDlg (CABECERA_IMPRESION, MSJ_COM_PRINTING, mtInformation, [mbOk],mbOk, 0);
       end*)
       else
       begin
           MessageDlg (CABECERA_IMPRESION, MSJ_COM_ERRORIMPR, mtInformation, [mbOk],mbOk, 0);
       end
   end;

   { Hay que tener cuidado por si el usuario quiere salir del form pulsando
     Alt+F4, en cuyo caso habrá que asociar dicha combinación de teclas con
     el código del evento asociado al pulsar el botón de Cancelar }
   function Ha_Pulsado_AltF4 (EstadoShift:TShiftState ; TPulsada: Word): boolean;
   begin
      Result := ((EstadoShift = [ssAlt]) and (TPulsada = VK_F4));
   end;

   procedure AbrirTabla (UnaTabla : TClientDataSet);
   begin
     try
       UnaTabla.Open;
       {$IFDEF TRAZAS}
         fTrazas.PonAnotacion(TRAZA_FLUJO,3,FICHERO_ACTUAL, 'ACTIVADA CORRECTAMENTE LA TABLA ' + UnaTabla.Name );
       {$ENDIF}
     except
       on E : Exception do
       begin
         fAnomalias.PonAnotacion(TRAZA_SIEMPRE,5,FICHERO_ACTUAL, 'NO SE PUEDE ABRIR LA TABLA ' + UnaTabla.Name + ' : ' + E.message);
         raise;
       end;
     end;
   end;

   // Devuelve en qué posición del combo box se encuentra NombreTipo
   function Devolver_Posicion_ComboBox (Elementos: TStrings; NumElem: integer; NombreTipo: string):integer;
   var
      NumElementosCombo: integer; // var. auxi. que contiene el nº elementos del combo box Combo
      iContador: integer; // Actúa a modo de índice

   begin
       Result := -1;
       NumElementosCombo := NumElem-1;
       for iContador := 0 to NumElementosCombo do
         if (NombreTipo = Elementos[iContador]) then
         begin
             Result := iContador;
             break;
         end
   end;

   procedure Combo_ConTeclas (Combo: TComboBox; var Tecla: word);
   begin
       if (Boolean(SendMessage (Combo.Handle, CB_GETDROPPEDSTATE, 0, 0))) then
          SendMessage (Combo.Handle, CB_SHOWDROPDOWN, 0, 0)
       else
          SendMessage (Combo.Handle, CB_SHOWDROPDOWN, 1, 0);

       Tecla := 0;
   end;

   // Devuelve True si el nº oblea se ha introducido correctamente, es decir, si el formato es dd-dddddd
   function NumObleaCorrecto (sOblea: string): boolean;
   begin
       Result := False;
       try
          {$B-}
          Result := (Es_Numero(sOblea[1]) and Es_Numero(sOblea[2]) and (sOblea[3] = '-') and
                     Es_Numero(sOblea[4]) and Es_Numero(sOblea[5]) and Es_Numero(sOblea[6]) and
                     Es_Numero(sOblea[7]) and Es_Numero(sOblea[8]) and Es_Numero(sOblea[9])and
                     (Length(sOblea) = 9));
       except
            on E:Exception do
               FAnomalias.PonAnotacion (TRAZA_SIEMPRE,19,FICHERO_ACTUAL,Format ('%s %s %s', ['Error en NumObleaCorrecto:', E.Message,sOblea]));
       end;
   end;

   function NumObleaGNCCorrecto (sOblea: string): boolean;
   begin
       Result := False;
       try
          {$B-}
          Result := (Es_Numero(sOblea[1]) and Es_Numero(sOblea[2]) and Es_Numero(sOblea[3]) and
                     Es_Numero(sOblea[4]) and Es_Numero(sOblea[5]) and Es_Numero(sOblea[6]) and
                     Es_Numero(sOblea[7]) and Es_Numero(sOblea[8]) and
                     (Length(sOblea) >= 8));
       except
            on E:Exception do
               FAnomalias.PonAnotacion (TRAZA_SIEMPRE,19,FICHERO_ACTUAL,Format ('%s %s %s', ['Error en NumObleaCorrecto:', E.Message,sOblea]));
       end;
   end;


   { Dado un nº oblea con el formato aa-bbbbbb (siendo a y b dígitos) devuelve:
         - bbbbbb   si bbbbbb <= 999999 y
         - aabbbbbb si bbbbbb >  999999 }
   function Devolver_NumeroOblea (sOblea: string): integer;
   var
      iOblea_Inicio, iOblea_Fin: integer; { var. auxi. que almacenan los dos primeros
                                            y los 6 últimos dígitos del nº oblea,
                                            respectivamente }

   begin
       Result := 0;
       try
          iOblea_Inicio := StrToInt (Copy (sOblea,1,2));
          iOblea_Fin := StrToInt (Trim(Copy (sOblea,4,Length(sOblea))));
          if (iOblea_Inicio = 0) then
            Result := iOblea_Fin
          else
            Result := (iOblea_Inicio * 1000000) + iOblea_Fin
       except
            on E:Exception do
               FAnomalias.PonAnotacion (TRAZA_SIEMPRE,20,FICHERO_ACTUAL,Format ('%s %s %s', ['Error en Devolver_NumeroOblea:', E.Message,sOblea]));
       end;
   end;


   { Suma 1900 si el año está comprendido entre 70-99 y Suma 2000 si iAnio está
     comprendido entre 00-69. Devuelve 0 si se ha producido algún error }
   function Sumar_1900 (iAnio: integer): integer;
   begin
       Result := 0;
       try
          if (iAnio in [PRIMER_ANIO_SIGLO20..ULTIMO_ANIO_SIGLO20]) then
              Result := 1900 + iAnio
          else
              Result := 2000 + iAnio
       except
            on E:Exception do
               FAnomalias.PonAnotacion (TRAZA_SIEMPRE,9,FICHERO_ACTUAL,'Error en Sumar_1900: ' + E.Message);
       end;
   end;

   // Dado un nº con el formato: 96 00020003123456 devuelve 96 y dado 01 00020003123456 devuelve 2001
   function Obtener_Ejercicio (sNumInsp: string): integer;
   begin
       Result := 0;
       try
          Result := Sumar_1900 (StrToInt(Copy (sNumInsp, 1, 2)));
       except
            on E:Exception do
               FAnomalias.PonAnotacion (TRAZA_SIEMPRE,13,FICHERO_ACTUAL,'Error en Obtener_Ejercicio: ' + E.Message);
       end;
   end;

   // Dado un nº con el formato: 96 00020003123456 devuelve 123456
   function Obtener_NumeroInspeccion (sNumInsp: string): integer;
   begin
       Result := 0;
       try
          Result := StrToInt(Copy (sNumInsp, 12, 6));
       except
            on E:Exception do
               FAnomalias.PonAnotacion (TRAZA_SIEMPRE,11,FICHERO_ACTUAL,'Error en Obtener_NumeroInspeccion: ' + E.Message);
       end;
   end;

   // Devuelve True si sF1 es anterior a sF2
   function EsFechaMenor (sF1, sF2: string): boolean;
   begin
       try
         Result := (StrToDate(sF1) <= StrToDate(sF2));
       except
            on E:Exception do
              Result := False;
       end;
   end;

function ExisteRegistro (UnaTabla : tClientDataSet; UnasColumnas : string; UnosValores : Variant) : boolean;
var
  bok : boolean;
begin
  bok := False;
  try
    try
      bOk := UnaTabla.Locate(UnasColumnas, UnosValores, [loCaseInsensitive]);
    except
      on E : Exception do begin
        bOk := False;
        //VarGlobs.bHayAlgunError := ERROR_VTV;
        fAnomalias.PonAnotacion(TRAZA_SIEMPRE,7,FICHERO_ACTUAL, 'NO SE PUEDE BUSCAR EN ' + UnaTabla.Name + ': ' + E.message);
      end;
    end;
  finally
    result := bOk;
  end;
end;

function CuitCorrecto (nrocuit: string):boolean;
var i, suma, coeficiente, digito, control: integer;
    cadcuit: string;
begin

  while Pos('-', nrocuit) > 0 do
  delete(nrocuit,Pos('-', nrocuit),1);
  cadcuit := nrocuit;
  suma := 0;
  coeficiente := 2;
  try
    for i := 10 DownTo 1 do
    begin
      digito := strtoint(cadcuit[i]);
      suma := suma + digito * coeficiente;
      if coeficiente = 7 then
        coeficiente := 2
      else
        inc(coeficiente);
    end;
      control := 11 - (suma mod 11);

      if control = 11 then
        control := 0;

      result:= TRUE;
      if (strtoint(cadcuit[11]) <> control)then
      begin
        showmessage('Error de Validación', 'El número de CUIT/CUIL no es válido');
        result:= FALSE;
      end;
    except
      result:=false;
      raise Exception.Createfmt('Número de CUIT/CUIL: %s no es válido',[cadcuit]);
    end;
end;

function TipoIva (atipoiva: string):widestring;
var tipo: char;
begin
  tipo:=atipoiva[1];
  case tipo of
    IVA_INSCRIPTO:
    begin
      result:='I';
    end;
    IVA_NO_INSCRIPTO:
    begin
      result:='R';
    end;
    IVA_EXENTO:
    begin
      result:='E';
    end;
    IVA_CONSUM_FINAL:
    begin
      result:='F';
    end;
    IVA_NO_RESPONSABLE:
    begin
      result:='N';
    end;
    IVA_MONOTRIBUTO:
    begin
      result:='M';
    end;
  end;
end;

function cuitsinguion(anrocuit: string):widestring;
begin
    while Pos('-', anrocuit) > 0 do
    delete(anrocuit,Pos('-', anrocuit),1);
    result:=anrocuit;
end;

function stringParaCF(anombre: string):widestring;
var i:integer;
begin
     for i := 1 to length(anombre) do
     begin
       if not (((Ord(anombre[i]) > 31) and (Ord(anombre[i]) < 91)) or ((Ord(anombre[i]) > 96) and (Ord(anombre[i]) < 123))) then
       begin
            case anombre[i] of
              'ñ':begin
                  anombre[i]:=#165;
              end;
              'Ñ':begin
                  anombre[i]:=#165;
              end;
              '´':begin
                  anombre[i]:=#39;
              end;
              '¿':begin
                  anombre[i]:='&';
              end;
              'Á','á':begin
                  anombre[i]:=#160;
              end;
              'É','é':begin
                  anombre[i]:=#130;
              end;
              'Í','í':begin
                  anombre[i]:=#161;
              end;
              'Ó','ó',#162:begin
                  anombre[i]:=#162;
              end;
              'Ú','ú','Û','Ü':begin
                  anombre[i]:=#163;
              end;
              'º',#248,#167:begin
                  anombre[i]:='o';
              end;
              else anombre[i]:='#';
            end;

       end;
     end;
     result:=anombre;
end;

function FormatoCeros (anumero: longint; acantidad: longint):string;
var aux:string;
    ceros,i: longint;
begin
  try
    ceros:= length(inttostr(anumero));
    if ceros > acantidad then
       raise exception.create('Error en la conversión de formato')
    else
    begin
       ceros:=acantidad-ceros;
       for i:= 1 to ceros do
         aux:=aux+'0';
       aux:=aux+inttostr(anumero);
       result:=aux;
    end;

  except
        Messagedlg('ERROR','Error en la conversión de formato',mtERROR,[mbok],mbok,0);

  end;

end;

procedure ActivarComponentes(Modo: boolean; formulario: TForm; atag: tTagSet);
var i:integer;
begin
  for i := 0 to formulario.ComponentCount-1 do
  begin
            if (formulario.Components[i].Tag in aTag) then
               TForm(formulario.Components[i]).Enabled := Modo;

  end;
end;

procedure MostrarComponentes(Modo: boolean; formulario: TForm; atag: ttagset);
var i:integer;
begin
  for i := 0 to formulario.ComponentCount-1 do
  begin
    if (formulario.Components[i].Tag in atag) then
    begin
       if (formulario.Components[i] is TLabel) then
           TLabel(formulario.Components[i]).visible := Modo
       else if (formulario.Components[i] is TProgressBar) then
           TProgressBar(formulario.Components[i]).visible := Modo
       else if (formulario.Components[i] is TBitBtn) then
           TBitBtn(formulario.Components[i]).visible := Modo
       else if (formulario.Components[i] is TDirectoryEdit) then
           TDirectoryEdit(formulario.Components[i]).visible := Modo
       else if (formulario.Components[i] is TBevel) then
           TBevel(formulario.Components[i]).visible := Modo
       else if (formulario.Components[i] is TRxDBLookupCombo) then
           TRxDBLookupCombo(formulario.Components[i]).visible := Modo
       else if (formulario.Components[i] is TCheckBox) then
           TCheckBox(formulario.Components[i]).visible := Modo
       else if (formulario.Components[i] is TPanel) then
           TPanel(formulario.Components[i]).visible := Modo
       else if (formulario.Components[i] is TQRLabel) then
           TQRLabel(formulario.Components[i]).visible := Modo
       else if (formulario.Components[i] is TDBDateEdit) then
           TDBDateEdit(formulario.Components[i]).visible := Modo;


    end;
  end;
end;

procedure MuevoComponentes(formulario: TForm; atag: ttagset; adelta: integer);
var i:integer;
begin
  for i := 0 to formulario.ComponentCount-1 do
  begin
    if (formulario.Components[i].Tag in atag) then
    begin
       if (formulario.Components[i] is TQRMemo) then
           TQRMemo(formulario.Components[i]).top := TQRMemo(formulario.Components[i]).top + adelta
       else if (formulario.Components[i] is Tqrshape) then
           Tqrshape(formulario.Components[i]).top := Tqrshape(formulario.Components[i]).top + adelta
       else if (formulario.Components[i] is Tqrlabel) then
           Tqrlabel(formulario.Components[i]).top := Tqrlabel(formulario.Components[i]).top + adelta;


    end;
  end;
end;

procedure HeightComponentes(formulario: TForm; atag: ttagset; adelta: integer);
var i:integer;
begin
  for i := 0 to formulario.ComponentCount-1 do
  begin
    if (formulario.Components[i].Tag in atag) then
    begin
       if (formulario.Components[i] is TQRBand) then
           TQRBand(formulario.Components[i]).Height := TQRBand(formulario.Components[i]).Height + adelta

    end;
  end;
end;


function DevuelveUsuario(aBD: tSQLConnection):string;
var ind,largo:integer;
begin
  ind:=Pos('=',aBD.params[0]);
  largo:=length(aBD.params[0]);
  result := copy(aBD.params[0],ind+1,largo-ind);
end;

end.

